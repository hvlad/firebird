name: CI

on: [push, pull_request]

jobs:

  build-linux-ubuntu-x64-clang:
    if: github.ref_type != 'tag'
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: Prepare
        run: |
          sudo apt-get install libtool-bin libtomcrypt1 libtomcrypt-dev libtommath1 libtommath-dev libicu-dev zlib1g-dev cmake

      - name: Build
        run: |
          CC=clang CXX=clang++ ./autogen.sh --enable-binreloc --prefix=/opt/firebird
          make -j4
          make tests -j4
          make run_tests
          make dist
          tar xzvf gen/Firebird-*-linux-x64.tar.gz
          (cd Firebird-*-linux-x64; sudo ./install.sh -silent)

      - name: Upload installer
        uses: actions/upload-artifact@main
        with:
          name: firebird-ubuntu-20.04-clang-x64
          path: gen/Firebird-*-linux-x64.tar.gz

  build-alpine-x64:
    if: github.ref_type != 'tag'
    runs-on: ubuntu-20.04
    container: alpine:3.14

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: Prepare
        run: apk update && apk --no-cache --update add build-base libtool git autoconf automake cmake zlib-dev icu-dev ncurses-dev libedit-dev linux-headers tar

      - name: Build
        run: |
          ./autogen.sh --enable-binreloc-threads --with-builtin-tommath --with-builtin-tomcrypt --prefix=/opt/firebird
          make -j4
          make tests -j4
          make run_tests
          make dist
          tar xzvf gen/Firebird-*-linux-x64.tar.gz

      - name: Upload installer
        uses: actions/upload-artifact@main
        with:
          name: firebird-alpine-x64
          path: gen/Firebird-*-linux-x64.tar.gz

  build-windows:
    if: github.ref_type != 'tag'
    runs-on: ${{ matrix.os }}
    env:
      VS_VERSION: ${{ (matrix.os == 'windows-2019' && '2019' || (matrix.os == 'windows-2022' && '2022' || '')) }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - windows-2019
        platform: [x64, x86]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: Prepare
        shell: cmd
        run: |
          for /r %%i in (*.bat) do unix2dos "%%i"
          choco uninstall --no-progress --yes innosetup
          choco install --no-progress --yes innosetup --version=6.1.2

      - name: Build
        shell: cmd
        env:
          PLATFORM: ${{ matrix.platform }}
          VS_SCRIPT: ${{ matrix.os == 'windows-2022' && 'C:\Program Files\Microsoft Visual Studio\%VS_VERSION%\Enterprise\Common7\Tools\VsDevCmd.bat' || 'C:\Program Files (x86)\Microsoft Visual Studio\%VS_VERSION%\Enterprise\Common7\Tools\VsDevCmd.bat' }}
        run: |
          set SEVENZIP=C:\Program Files\7-Zip
          set INNO6_SETUP_PATH=C:\Program Files (x86)\Inno Setup 6
          if "%PLATFORM%" == "x64" set FB_VS_ARCH=amd64
          if "%PLATFORM%" == "x64" set FB_PROCESSOR_ARCHITECTURE=AMD64
          if "%PLATFORM%" == "x86" set FB_VS_ARCH=x86
          if "%PLATFORM%" == "x86" set FB_PROCESSOR_ARCHITECTURE=x86
          call "%VS_SCRIPT%" -arch=%FB_VS_ARCH%
          cd builds\win32
          call run_all.bat
          call run_tests.bat

      - name: Upload zip
        uses: actions/upload-artifact@main
        with:
          name: firebird-windows-vs-${{ env.VS_VERSION }}-${{ matrix.platform }}-zip
          path: builds/install_images/Firebird-*-windows-${{ matrix.platform }}.zip

      - name: Upload installer
        uses: actions/upload-artifact@main
        with:
          name: firebird-windows-vs-${{ env.VS_VERSION }}-${{ matrix.platform }}-installer
          path: builds/install_images/*-windows-${{ matrix.platform }}.exe

